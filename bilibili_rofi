#!/usr/bin/env python3
# coding=utf-8

import sys, urllib, json
import gzip
import webbrowser
import urllib.parse
import urllib.request
from io import BytesIO
from subprocess import Popen, PIPE

import user

def run_rofi(alts, prompt="Settings", selected_row=0, published_num='', delay_num='', strip=True, force_alts=False, max_lines=20):
    """TODO: Docstring for run_rofi.
    :returns: Selected option or entered string
    """
    lines = max(min(max_lines, len(alts)), 1);
    rofi = Popen([
                    "rofi", "-i", "-dmenu", "-l", str(lines), "-p", prompt, 
                    "-selected-row", str(selected_row), 
                    "-u", published_num,
                    "-a", delay_num
                 ],
                 stdout=PIPE, stdin=PIPE)
    selected = rofi.communicate("\n".join(alts).encode("utf-8"))[0].decode("utf-8")

    if strip:
        selected = selected.strip();
    
    return selected;

class timeline ():
    def __init__ (self):
        self.url_cn     = 'https://bangumi.bilibili.com/web_api/timeline_cn'
        self.url_global = 'https://bangumi.bilibili.com/web_api/timeline_global'
        self.url_dyn    = 'https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/dynamic_new?uid={0}&type_list=8'.format(user.uid)
        self.url_live   = 'https://api.live.bilibili.com/relation/v1/feed/getList?page=1&pagesize=10'
        self.url = ''
        self.headers = {}
        self.content = ''
        
        self.MainRun()

    def choose_url(self):
        timelines = ["番剧时间表", "国创时间表", "关注动态","直播"]
        sel = run_rofi([i for i in timelines], "Choose Timeline")
        if not sel:
            sys.exit()
        if (sel == "番剧时间表"):
            self.url = self.url_global
            sel_type = 1
        elif (sel == "国创时间表"):
            self.url = self.url_cn
            sel_type = 1
        elif (sel == "关注动态"):
            self.url = self.url_dyn
            self.headers = {
                'GET https': '/dynamic_svr/v1/dynamic_svr/dynamic_new?uid={0}&type_list=8 HTTP/1.1'.format(user.uid),
                'Host': 'api.vc.bilibili.com',
                'Connection': 'keep-alive',
                'Accept': 'application/json, text/plain, */*',
                'Sec-Fetch-Dest': 'empty',
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',
                'Origin': 'https://t.bilibili.com',
                'Sec-Fetch-Site': 'same-site',
                'Sec-Fetch-Mode': 'cors',
                'Referer': 'https://t.bilibili.com/?tab=8',
                'Accept-Encoding': 'gzip',
                'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',
                'Cookie' : user.cookie
            }
            sel_type = 2
        elif (sel == "直播"):
            self.url = self.url_live
            self.headers = {
                'GET https': '/relation/v1/feed/getList?page=1&pagesize=10 HTTP/1.1',
                'Host': 'api.live.bilibili.com',
                'Connection': 'keep-alive',
                'Accept': 'application/json, text/plain, */*',
                'Sec-Fetch-Dest': 'empty',
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',
                'Origin': 'https://t.bilibili.com',
                'Sec-Fetch-Site': 'same-site',
                'Sec-Fetch-Mode': 'cors',
                'Referer': 'https://t.bilibili.com/',
                'Accept-Encoding': 'gzip',
                'Accept-Language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',
                'Cookie' : user.cookie
            }
            sel_type = 3
        
        req = urllib.request.Request(url=self.url, headers=self.headers)
        resp = urllib.request.urlopen(req)
        self.content = resp.read()
        if (not self.content):
            sys.exit()
        #  print (self.content)
        return sel_type

    
    def choose_day(self, CONTENT):
        result = json.loads(CONTENT)["result"]
        sel = run_rofi( [self.get_date(d) for d in result], "日期", 6 )
        if not sel:
            sys.exit()
        
        sel_day = [i for i in result if self.get_date(i) == sel]
        assert len(sel_day) == 1
        return sel_day[0]["seasons"]

    def get_date(self, ITEM):
        if (ITEM["is_today"]):
            return ("Today")
        else:
            return (ITEM["date"]+self.get_week(ITEM["day_of_week"]))

    def get_week(self, day_num):
        if day_num == 1:
            return "(周一)"
        elif day_num == 2:
            return "(周二)"
        elif day_num == 3:
            return "(周三)"
        elif day_num == 4:
            return "(周四)"
        elif day_num == 5:
            return "(周五)"
        elif day_num == 6:
            return "(周六)"
        elif day_num == 7:
            return "(周日)"

    def get_bangumi(self, item):
        self.index += 1
        if (item["delay"]):
            return "{0} {1}({2}) {3}".format(self.index, item["title"], item["delay_index"], item["delay_reason"])
        else:
            return "{0} {1}({2}) {3}".format(self.index, item["title"], item["pub_index"], item["pub_time"])

    def choose_bangumi(self, SEASONS):
        published = -1
        pubnum = ""
        delay = ""
        for i in range(len(SEASONS)):
            if (SEASONS[i]["is_published"]):
                published = i
                pubnum += (str(i) + ',')
            if (SEASONS[i]["delay"]):
                delay += (str(i) + ',')
        
        self.index = 0
        sel = run_rofi( [self.get_bangumi(d) for d in SEASONS], "TIMELINE" , published, pubnum, delay)
        if ( sel == ".." ):
            return sel
        if not sel:
            sys.exit()
        self.index = 0
        sel_bangumi = [i for i in SEASONS if self.get_bangumi(i) == sel]
        assert len(sel_bangumi) == 1
        return sel_bangumi[0]

    def get_dynamic(self, card):
        title = json.loads(card["card"])["title"]
        owner = json.loads(card["card"])["owner"]
        return (u"{0} ({1})".format(title, owner["name"]))


    def choose_dynamic(self):
        cardlists = json.loads(self.content)["data"]["cards"]
        sel = run_rofi( [self.get_dynamic(d) for d in cardlists], "动态")
        if not sel:
            sys.exit()
        sel_dyn = [i for i in cardlists if self.get_dynamic(i) == sel]
        assert len(sel_dyn) == 1
        aid = json.loads(sel_dyn[0]["card"])["aid"]
        return ("https://www.bilibili.com/video/av{0}".format(aid))

    def get_live(self, item):
        return ("{0}[{2}] {1}".format(item["title"], item["uname"], item["area_v2_name"]))
    
    def choose_live(self):
        itemlists = json.loads(self.content)["data"]["rooms"]
        sel = run_rofi( [self.get_live(d) for d in itemlists], "直播")
        if not sel:
            sys.exit()
        sel_live = [i for i in itemlists if self.get_live(i) == sel]
        assert len(sel_live) == 1
        return (sel_live[0]["link"])

    def unzip_content(self):
        buff = BytesIO(self.content)
        f = gzip.GzipFile(fileobj=buff)
        self.content = f.read().decode()
        if (not self.content):
            sys.exit()

    def MainRun (self):
        TYPE = self.choose_url()
        if (TYPE == 1):
            bangumi = '..'
            while ( bangumi == '..' ):
                sel_seasons = self.choose_day(self.content)
                bangumi = self.choose_bangumi(sel_seasons)
            webbrowser.open(bangumi["url"])
        elif (TYPE == 2):
            self.unzip_content()
            webbrowser.open(self.choose_dynamic())
        elif (TYPE == 3):
            self.unzip_content()
            webbrowser.open(self.choose_live())


if __name__ == '__main__':
    client = timeline()
